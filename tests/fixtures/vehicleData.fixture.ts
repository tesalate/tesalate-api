import mongoose from 'mongoose';
import faker from 'faker';
import VehicleData from '../../src/models/vehicleData.model';
const { vehicleOneForAdmin, vehicleOneForUser, vehicleTwoForUser } = require('./vehicle.fixture');

const vehicleData = {
  charge_state: {
    battery_heater_on: faker.datatype.boolean(),
    battery_level: faker.datatype.number(100),
    battery_range: faker.datatype.float({ min: 0, max: 310, precision: 2 }),
    charge_amps: faker.datatype.number(200),
    charge_current_request: faker.datatype.number(200),
    charge_current_request_max: faker.datatype.number(200),
    charge_enable_request: faker.datatype.boolean(),
    charge_energy_added: faker.datatype.float({ min: 0, max: 100, precision: 2 }),
    charge_limit_soc: faker.datatype.number(100),
    charge_limit_soc_max: faker.datatype.number(100),
    charge_limit_soc_min: faker.datatype.number(100),
    charge_limit_soc_std: faker.datatype.number(100),
    charge_miles_added_ideal: faker.datatype.float({ min: 0, max: 100, precision: 2 }),
    charge_miles_added_rated: faker.datatype.float({ min: 0, max: 100, precision: 2 }),
    charge_port_cold_weather_mode: faker.datatype.boolean(),
    charge_port_door_open: faker.datatype.boolean(),
    charge_port_latch: faker.random.arrayElement(['<invalid>', 'Engaged', 'Disengaged']),
    charge_rate: faker.datatype.number(251),
    charge_to_max_range: faker.datatype.boolean(),
    charger_actual_current: faker.datatype.number(251),
    charger_phases: faker.random.arrayElement([null, 1]),
    charger_pilot_current: faker.datatype.number(251),
    charger_power: faker.datatype.number(251),
    charger_voltage: faker.datatype.number(251),
    charging_state: faker.random.arrayElement([
      null,
      'Disconnected',
      'Charging',
      'Complete',
      'NoPower',
      'Starting',
      'Stopped',
    ]),
    conn_charge_cable: faker.random.arrayElement(['<invalid>', 'SAE']),
    est_battery_range: faker.datatype.number(310),
    fast_charger_brand: faker.random.arrayElement(['<invalid>', 'Tesla', '']),
    fast_charger_present: faker.datatype.boolean(),
    fast_charger_type: faker.random.arrayElement(['<invalid>', 'Tesla', 'MCSingleWireCAN', 'ACSingleWireCAN']),
    ideal_battery_range: faker.datatype.number(310),
    managed_charging_active: faker.datatype.boolean(),
    managed_charging_start_time: faker.random.arrayElement([null]),
    managed_charging_user_canceled: faker.datatype.boolean(),
    max_range_charge_counter: faker.datatype.number(10),
    minutes_to_full_charge: faker.datatype.number(99999),
    not_enough_power_to_heat: faker.random.arrayElement([null]),
    off_peak_charging_enabled: faker.datatype.boolean(),
    off_peak_charging_times: faker.random.arrayElement(['all_week']),
    off_peak_hours_end_time: faker.datatype.number(360),
    preconditioning_enabled: faker.datatype.boolean(),
    preconditioning_times: faker.random.arrayElement(['all_week']),
    scheduled_charging_mode: faker.random.arrayElement(['Off', 'On']),
    scheduled_charging_pending: faker.datatype.boolean(),
    scheduled_charging_start_time: faker.datatype.number(2573608600),
    scheduled_departure_time: faker.datatype.number(2573608600),
    time_to_full_charge: faker.datatype.float({ min: 0, max: 100, precision: 2 }),
    timestamp: faker.datatype.number(1635215860241),
    trip_charging: faker.datatype.boolean(),
    usable_battery_level: faker.datatype.number(100),
    user_charge_enable_request: faker.random.arrayElement([null, true, false]),
  },
  climate_state: {
    battery_heater: faker.datatype.boolean(),
    battery_heater_no_power: faker.random.arrayElement([null]),
    climate_keeper_mode: faker.random.arrayElement(['off', 'dog', 'on', 'camp']),
    defrost_mode: faker.datatype.number(3),
    driver_temp_setting: faker.datatype.number(20),
    fan_status: faker.datatype.number(10),
    inside_temp: faker.datatype.float({ min: 0, max: 100, precision: 2 }),
    is_auto_conditioning_on: faker.datatype.boolean(),
    is_climate_on: faker.datatype.boolean(),
    is_front_defroster_on: faker.datatype.boolean(),
    is_preconditioning: faker.datatype.boolean(),
    is_rear_defroster_on: faker.datatype.boolean(),
    left_temp_direction: faker.datatype.number(1000),
    max_avail_temp: faker.datatype.number(50),
    min_avail_temp: faker.datatype.number(15),
    outside_temp: faker.datatype.number(50),
    passenger_temp_setting: faker.datatype.number(50),
    remote_heater_control_enabled: faker.datatype.boolean(),
    right_temp_direction: faker.datatype.number(1000),
    seat_heater_left: faker.datatype.number(3),
    seat_heater_rear_center: faker.datatype.number(3),
    seat_heater_rear_left: faker.datatype.number(3),
    seat_heater_rear_right: faker.datatype.number(3),
    seat_heater_right: faker.datatype.number(3),
    side_mirror_heaters: faker.datatype.boolean(),
    timestamp: faker.datatype.number(1635215860241),
    wiper_blade_heater: faker.datatype.boolean(),
  },
  drive_state: {
    gps_as_of: faker.datatype.number(1635215691),
    heading: faker.datatype.number(360),
    latitude: faker.datatype.float({ min: 0, max: 100, precision: 2 }),
    longitude: faker.datatype.float({ min: 0, max: 100, precision: 2 }),
    native_latitude: faker.datatype.float({ min: 0, max: 100, precision: 2 }),
    native_location_supported: faker.datatype.number(2),
    native_longitude: faker.datatype.float({ min: 0, max: 100, precision: 2 }),
    native_type: faker.random.arrayElement(['wgs']),
    power: faker.datatype.number(500),
    shift_state: faker.random.arrayElement([null, 'P', 'R', 'N', 'D']),
    speed: faker.datatype.number(134),
    timestamp: faker.datatype.number(1635215860241),
  },
  gui_settings: {
    gui_24_hour_time: faker.datatype.boolean(),
    gui_charge_rate_units: faker.random.arrayElement(['kW', 'mi/hr']),
    gui_distance_units: faker.random.arrayElement(['mi/hr', 'km/hr']),
    gui_range_display: faker.random.arrayElement(['Rated']),
    gui_temperature_units: faker.random.arrayElement(['F', 'C']),
    show_range_units: faker.datatype.boolean(),
    timestamp: faker.datatype.number(1635215860241),
  },
  vehicle_config: {
    can_accept_navigation_requests: faker.datatype.boolean(),
    can_actuate_trunks: faker.datatype.boolean(),
    car_special_type: faker.random.arrayElement(['base']),
    car_type: faker.random.arrayElement(['model3', 'modely', 'models', 'modelx', 'models2', 'modelx2']),
    charge_port_type: faker.random.arrayElement(['US']),
    default_charge_to_max: faker.datatype.boolean(),
    driver_assist: faker.random.arrayElement(['TeslaAP1', 'TeslaAP2', 'TeslaAP3']),
    ece_restrictions: faker.datatype.boolean(),
    efficiency_package: faker.random.arrayElement(['Default']),
    eu_vehicle: faker.datatype.boolean(),
    exterior_color: faker.random.arrayElement(['MidnightSilver', 'White', 'Black']),
    exterior_trim: faker.random.arrayElement(['Chrome', 'Black']),
    has_air_suspension: faker.datatype.boolean(),
    has_ludicrous_mode: faker.datatype.boolean(),
    interior_trim_type: faker.random.arrayElement(['Black']),
    key_version: faker.datatype.number(4),
    motorized_charge_port: faker.datatype.boolean(),
    performance_package: faker.random.arrayElement(['Base']),
    plg: faker.datatype.boolean(),
    pws: faker.datatype.boolean(),
    rear_drive_unit: faker.random.arrayElement(['PM216MOSFET']),
    rear_seat_heaters: faker.datatype.number(1),
    rear_seat_type: faker.datatype.number(1),
    rhd: faker.datatype.boolean(),
    roof_color: faker.random.arrayElement(['RoofColorGlass', 'None']),
    seat_type: faker.random.arrayElement([null, 0, 1, 2]),
    spoiler_type: faker.random.arrayElement(['None']),
    sun_roof_installed: faker.random.arrayElement([null, 0, 1, 2]),
    third_row_seats: faker.random.arrayElement(['None']),
    timestamp: faker.datatype.number(1635215860241),
    trim_badging: faker.random.arrayElement(['74', '74d', '90d', 'p90d']),
    use_range_badging: faker.datatype.boolean(),
    utc_offset: faker.datatype.number(99999),
    webcam_supported: faker.datatype.boolean(),
    wheel_type: faker.random.arrayElement(['Pinwheel18', 'AeroTurbine19']),
  },
  vehicle_state: {
    api_version: faker.datatype.number(50),
    autopark_state_v3: faker.random.arrayElement(['unavailable', 'available']),
    calendar_supported: faker.datatype.boolean(),
    car_version: faker.random.arrayElement(['2021.36.5 9428f5d2f612']),
    center_display_state: faker.datatype.number(9),
    df: faker.datatype.number(1),
    dr: faker.datatype.number(1),
    fd_window: faker.datatype.number(1),
    fp_window: faker.datatype.number(1),
    ft: faker.datatype.number(1),
    homelink_device_count: faker.datatype.number(2),
    homelink_nearby: faker.datatype.boolean(),
    is_user_present: faker.datatype.boolean(),
    locked: faker.datatype.boolean(),
    media_state: { remote_control_enabled: faker.datatype.boolean() },
    notifications_supported: faker.datatype.boolean(),
    odometer: faker.datatype.float({ min: 0, max: 100, precision: 2 }),
    parsed_calendar_supported: faker.datatype.boolean(),
    pf: faker.datatype.number(1),
    pr: faker.datatype.number(1),
    rd_window: faker.datatype.number(1),
    remote_start: faker.datatype.boolean(),
    remote_start_enabled: faker.datatype.boolean(),
    remote_start_supported: faker.datatype.boolean(),
    rp_window: faker.datatype.number(1),
    rt: faker.datatype.number(1),
    sentry_mode: faker.datatype.boolean(),
    sentry_mode_available: faker.datatype.boolean(),
    software_update: {
      download_perc: faker.datatype.number(100),
      expected_duration_sec: faker.datatype.number(6000),
      install_perc: faker.datatype.number(100),
      status: faker.random.arrayElement([
        '',
        'downloading',
        'installing',
        'scheduled',
        'available',
        'downloading_wifi_wait',
      ]),
      version: faker.random.arrayElement(['', ' ', '2021.12.25.7', '2021.40.6']),
    },
    speed_limit_mode: {
      active: faker.datatype.boolean(),
      current_limit_mph: faker.datatype.number(50),
      max_limit_mph: faker.datatype.number(90),
      min_limit_mph: faker.datatype.number(50),
      pin_code_set: faker.datatype.boolean(),
    },
    timestamp: faker.datatype.number(1635215860241),
    valet_mode: faker.datatype.boolean(),
    vehicle_name: faker.internet.userName(),
    vehicle_self_test_progress: faker.datatype.number(1),
    vehicle_self_test_requested: faker.datatype.boolean(),
    webcam_available: faker.datatype.boolean(),
  },
  user_id: faker.datatype.number(9999),
  speed: [faker.datatype.number(134), faker.datatype.number(134)],
  power: [faker.datatype.number(337), faker.datatype.number(337)],
  drive_session_id: faker.random.arrayElement([mongoose.Types.ObjectId(), null]),
  charge_session_id: faker.random.arrayElement([mongoose.Types.ObjectId(), null]),
  geoJSON: faker.random.arrayElement([
    {
      type: 'Point',
      coordinates: [faker.datatype.number({ min: -100, max: 100 }), faker.datatype.number({ min: -100, max: 100 })],
    },
  ]),
};

const dataPointForVehicleOneForAdmin = {
  _id: mongoose.Types.ObjectId(),
  user: vehicleOneForAdmin.user,
  color: vehicleOneForAdmin.color,
  access_type: vehicleOneForAdmin.access_type,
  tokens: vehicleOneForAdmin.tokens,
  backseat_token: vehicleOneForAdmin.backseat_token,
  backseat_token_updated_at: vehicleOneForAdmin.backseat_token_updated_at,
  id: vehicleOneForAdmin.id,
  vehicle_id: vehicleOneForAdmin.vehicle_id,
  vin: vehicleOneForAdmin.vin,
  display_name: vehicleOneForAdmin.display_name,
  option_codes: vehicleOneForAdmin.option_codes,
  state: vehicleOneForAdmin.state,
  in_service: vehicleOneForAdmin.in_service,
  id_s: vehicleOneForAdmin.id_s,
  calendar_enabled: vehicleOneForAdmin.calendar_enabled,
  vehicle: vehicleOneForAdmin._id,
  api_version: vehicleOneForAdmin.api_version,
  ...vehicleData,
};

const dataPointForVehicleOneForUser = {
  _id: mongoose.Types.ObjectId(),
  user: vehicleOneForUser.user,
  color: vehicleOneForUser.color,
  access_type: vehicleOneForUser.access_type,
  tokens: vehicleOneForUser.tokens,
  backseat_token: vehicleOneForUser.backseat_token,
  backseat_token_updated_at: vehicleOneForUser.backseat_token_updated_at,
  id: vehicleOneForUser.id,
  vehicle_id: vehicleOneForUser.vehicle_id,
  vin: vehicleOneForUser.vin,
  display_name: vehicleOneForUser.display_name,
  option_codes: vehicleOneForUser.option_codes,
  state: vehicleOneForUser.state,
  in_service: vehicleOneForUser.in_service,
  id_s: vehicleOneForUser.id_s,
  calendar_enabled: vehicleOneForUser.calendar_enabled,
  vehicle: vehicleOneForUser._id,
  api_version: vehicleOneForUser.api_version,
  ...vehicleData,
};

const dataPointForVehicleTwoForUser = {
  _id: mongoose.Types.ObjectId(),
  user: vehicleTwoForUser.user,
  color: vehicleTwoForUser.color,
  access_type: vehicleTwoForUser.access_type,
  tokens: vehicleTwoForUser.tokens,
  backseat_token: vehicleTwoForUser.backseat_token,
  backseat_token_updated_at: vehicleTwoForUser.backseat_token_updated_at,
  id: vehicleTwoForUser.id,
  vehicle_id: vehicleTwoForUser.vehicle_id,
  vin: vehicleTwoForUser.vin,
  display_name: vehicleTwoForUser.display_name,
  option_codes: vehicleTwoForUser.option_codes,
  state: vehicleTwoForUser.state,
  in_service: vehicleTwoForUser.in_service,
  id_s: vehicleTwoForUser.id_s,
  calendar_enabled: vehicleTwoForUser.calendar_enabled,
  vehicle: vehicleTwoForUser._id,
  api_version: vehicleTwoForUser.api_version,
  ...vehicleData,
};

const insertVehicleDataPoints = async (dataPoints) => {
  await VehicleData.insertMany(dataPoints.map((data) => data));
};

export {
  dataPointForVehicleOneForAdmin,
  dataPointForVehicleOneForUser,
  dataPointForVehicleTwoForUser,
  insertVehicleDataPoints,
};
